#!/usr/bin/env node

/**
 * HTTP-—Å–µ—Ä–≤–µ—Ä MCP –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Wiki.js —Å Cursor
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Model Context Protocol –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã —Å Wiki.js
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ JSON-RPC
 */

import http from "http";
import { createRequire } from "module";
import path from "path";
import { fileURLToPath } from "url";
import { dirname } from "path";
import fetch from "node-fetch";
import fs from "fs";
import { ZodError } from "zod";

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã Wiki.js
import { wikiJsTools, wikiJsToolsWithImpl } from "./dist/tools.js";

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—ã Zod –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
import {
  safeValidateToolParams,
  safeValidateToolResult,
} from "./dist/schemas.js";

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3200;
const WIKIJS_BASE_URL = process.env.WIKIJS_BASE_URL || "http://localhost:3000";
const WIKIJS_TOKEN = process.env.WIKIJS_TOKEN || "";
const API_URL = `${WIKIJS_BASE_URL}/graphql`;

// –°–æ–∑–¥–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞
const logFile = fs.createWriteStream(path.join(__dirname, "fixed_server.log"), {
  flags: "a",
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è SSE –∫–ª–∏–µ–Ω—Ç–æ–≤
const sseClients = new Set();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log(message) {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] ${message}`;
  console.log(logMessage);
  logFile.write(logMessage + "\n");
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ API
async function checkApiAccess() {
  try {
    const response = await fetch(API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${WIKIJS_TOKEN}`,
      },
      body: JSON.stringify({
        query: `query { pages { list { id, title } } }`,
      }),
    });

    if (response.ok) {
      const data = await response.json();
      if (data.errors) {
        log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ API: ${JSON.stringify(data.errors)}`);
        return false;
      }
      return true;
    }
    return false;
  } catch (error) {
    log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wiki.js API: ${error.message}`);
    return false;
  }
}

// –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è MCP
const tools = wikiJsTools.map((tool) => ({
  function: tool.function,
}));

// –ò–º–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
const toolNames = tools.map((tool) => tool.function.name);

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∏–º–µ–Ω–∏
const toolsMap = wikiJsToolsWithImpl.reduce((acc, tool) => {
  acc[tool.function.name] = tool.implementation;
  return acc;
}, {});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SSE —Å–æ–±—ã—Ç–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
function sendSSEEvent(eventName, data) {
  const eventString = `event: ${eventName}\ndata: ${JSON.stringify(data)}\n\n`;
  for (const client of sseClients) {
    client.write(eventString);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ JSON-–æ—Ç–≤–µ—Ç–∞
function sendJSONResponse(res, data) {
  res.writeHead(200, { "Content-Type": "application/json" });
  res.end(JSON.stringify(data));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ–¥ MCP Cursor
function formatMCPResult(toolName, result) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  if (Array.isArray(result)) {
    // –î–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö –º–∞—Å—Å–∏–≤—ã (list_pages, search_pages –∏ —Ç.–¥.)
    return {
      method: toolName,
      content: [
        {
          type: "text",
          text: JSON.stringify(result, null, 2),
        },
      ],
      result: result,
    };
  } else if (toolName === "get_page" || toolName === "get_page_content") {
    // –î–ª—è get_page –∏ get_page_content
    return {
      method: toolName,
      content: [
        {
          type: "text",
          text:
            typeof result === "string"
              ? result
              : JSON.stringify(result, null, 2),
        },
      ],
      result: result,
    };
  } else if (toolName === "list_users") {
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è list_users, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–ª –æ—à–∏–±–∫–∏
    return {
      method: toolName,
      content: [
        {
          type: "text",
          text: Array.isArray(result)
            ? JSON.stringify(result, null, 2)
            : JSON.stringify([], null, 2),
        },
      ],
      // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ result –≤—Å–µ–≥–¥–∞ –º–∞—Å—Å–∏–≤
      result: Array.isArray(result) ? result : [],
    };
  } else if (toolName === "list_groups") {
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è list_groups
    return {
      method: toolName,
      content: [
        {
          type: "text",
          text: Array.isArray(result)
            ? JSON.stringify(result, null, 2)
            : JSON.stringify([], null, 2),
        },
      ],
      // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ result –≤—Å–µ–≥–¥–∞ –º–∞—Å—Å–∏–≤
      result: Array.isArray(result) ? result : [],
    };
  }

  // –û–±—â–∏–π —Å–ª—É—á–∞–π
  return {
    method: toolName,
    content: [
      {
        type: "text",
        text:
          typeof result === "string" ? result : JSON.stringify(result, null, 2),
      },
    ],
    result: result,
  };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ MCP HTTP —Å–µ—Ä–≤–µ—Ä—É
const server = http.createServer(async (req, res) => {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–∞ (CORS preflight)
  if (req.method === "OPTIONS") {
    res.writeHead(204);
    res.end();
    return;
  }

  // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
  log(`üì• ${req.method} ${req.url}`);

  // –†–∞–∑–±–∏—Ä–∞–µ–º URL –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—É—Ç–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const url = new URL(req.url, `http://${req.headers.host}`);
  const pathname = url.pathname;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ MCP –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON-RPC –¥–ª—è Cursor
  if (pathname === "/mcp" && req.method === "POST") {
    let body = "";
    req.on("data", (chunk) => {
      body += chunk.toString();
    });

    req.on("end", async () => {
      try {
        const request = JSON.parse(body);
        log(`üì© –ü–æ–ª—É—á–µ–Ω JSON-RPC –∑–∞–ø—Ä–æ—Å: ${JSON.stringify(request, null, 2)}`);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON-RPC 2.0 –∑–∞–ø—Ä–æ—Å–æ–≤
        if (request.jsonrpc === "2.0") {
          if (request.method === "initialize") {
            // –û—Ç–≤–µ—Ç –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞
            sendJSONResponse(res, {
              jsonrpc: "2.0",
              id: request.id,
              result: {
                protocolVersion:
                  request.params?.protocolVersion || "2023-07-01",
                capabilities: {
                  tools: { enabled: true },
                  prompts: { enabled: false },
                  resources: { enabled: false },
                  logging: { enabled: true },
                  roots: { listChanged: false },
                },
                serverInfo: {
                  name: "wikijs-mcp",
                  version: "1.0.0",
                },
              },
            });
          } else if (
            request.method === "workspace/tools" ||
            request.method === "tools/list"
          ) {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π Cursor
            const toolsForCursor = wikiJsTools.map((tool) => ({
              name: tool.function.name,
              description: tool.function.description,
              inputSchema: tool.function.parameters,
              outputSchema: { type: "object" },
              metadata: {
                title: tool.function.name
                  .replace(/_/g, " ")
                  .replace(/\b\w/g, (c) => c.toUpperCase()),
                description: tool.function.description,
                ui: {
                  icon: "document",
                  ui_type: "default",
                },
              },
            }));

            sendJSONResponse(res, {
              jsonrpc: "2.0",
              id: request.id,
              result: {
                tools: toolsForCursor,
              },
            });
          } else if (
            request.method === "workspace/executeCommand" ||
            request.method === "tools/execute"
          ) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
            const toolName = request.params.command || request.params.name;
            const params =
              request.params.arguments || request.params.params || {};

            log(
              `üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ executeCommand: ${toolName} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: ${JSON.stringify(
                params
              )}`
            );

            try {
              // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
              const validationResult = safeValidateToolParams(toolName, params);
              if (!validationResult.success) {
                log(
                  `‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è ${toolName}: ${JSON.stringify(
                    validationResult.error.format()
                  )}`
                );

                sendJSONResponse(res, {
                  jsonrpc: "2.0",
                  id: request.id,
                  error: {
                    code: -32602,
                    message: "Invalid params",
                    data: validationResult.error.format(),
                  },
                });
                return;
              }

              // –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
              const implementation = toolsMap[toolName];
              if (!implementation) {
                throw new Error(
                  `–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${toolName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`
                );
              }

              const result = await implementation(validationResult.data);

              // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
              const resultValidation = safeValidateToolResult(toolName, result);
              if (!resultValidation.success) {
                log(
                  `‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${toolName} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ö–µ–º–µ: ${JSON.stringify(
                    resultValidation.error
                  )}`
                );
              }

              sendJSONResponse(res, {
                jsonrpc: "2.0",
                id: request.id,
                result: {
                  content:
                    typeof result === "string"
                      ? [{ type: "text", text: result }]
                      : [
                          {
                            type: "text",
                            text: JSON.stringify(result, null, 2),
                          },
                        ],
                },
              });

              log(`‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ${toolName} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω`);

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
              sendSSEEvent("command_executed", {
                tool: toolName,
                status: "success",
              });
            } catch (error) {
              log(
                `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${toolName}: ${error.message}`
              );

              sendJSONResponse(res, {
                jsonrpc: "2.0",
                id: request.id,
                error: {
                  code: -32603,
                  message: "Internal error",
                  data: error.message,
                },
              });

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—à–∏–±–∫–µ
              sendSSEEvent("command_error", {
                tool: toolName,
                error: error.message,
              });
            }
          } else if (request.method === "tools/call") {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ tools/call
            const toolName = request.params.name;
            const params = request.params.arguments || {};

            log(
              `üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ tools/call: ${toolName} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: ${JSON.stringify(
                params
              )}`
            );

            try {
              // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ search_users (Cursor –æ–∂–∏–¥–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä 'q')
              if (toolName === "search_users" && params.q && !params.query) {
                log(
                  `‚ÑπÔ∏è –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ q -> query –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ search_users. q=${params.q}`
                );
                params.query = params.q;
                delete params.q;
                log(
                  `‚ÑπÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: ${JSON.stringify(params)}`
                );
              }

              // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
              if (toolName === "list_users" || toolName === "list_groups") {
                log(
                  `‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ${toolName} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é`
                );

                // –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é
                const implementation = toolsMap[toolName];
                if (!implementation) {
                  throw new Error(
                    `–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${toolName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`
                  );
                }

                const result = await implementation({});

                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è MCP
                const formattedResult = formatMCPResult(toolName, result);

                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                sendJSONResponse(res, {
                  jsonrpc: "2.0",
                  id: request.id,
                  result: formattedResult,
                });

                log(
                  `‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ${toolName} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ tools/call`
                );
                return;
              }

              // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
              const validationResult = safeValidateToolParams(toolName, params);
              if (!validationResult.success) {
                log(
                  `‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è ${toolName}: ${JSON.stringify(
                    validationResult.error.format()
                  )}`
                );

                sendJSONResponse(res, {
                  jsonrpc: "2.0",
                  id: request.id,
                  error: {
                    code: -32602,
                    message: "Invalid params",
                    data: validationResult.error.format(),
                  },
                });
                return;
              }

              // –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
              const implementation = toolsMap[toolName];
              if (!implementation) {
                throw new Error(
                  `–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${toolName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`
                );
              }

              const result = await implementation(validationResult.data);

              // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
              const resultValidation = safeValidateToolResult(toolName, result);
              if (!resultValidation.success) {
                log(
                  `‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${toolName} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ö–µ–º–µ: ${JSON.stringify(
                    resultValidation.error
                  )}`
                );
              }

              // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è MCP
              const formattedResult = formatMCPResult(toolName, result);

              // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON-RPC
              sendJSONResponse(res, {
                jsonrpc: "2.0",
                id: request.id,
                result: formattedResult,
              });

              log(
                `‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ${toolName} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ tools/call`
              );

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
              sendSSEEvent("tool_executed", {
                tool: toolName,
                status: "success",
              });
            } catch (error) {
              log(
                `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${toolName} —á–µ—Ä–µ–∑ tools/call: ${error.message}`
              );

              sendJSONResponse(res, {
                jsonrpc: "2.0",
                id: request.id,
                error: {
                  code: -32603,
                  message: "Internal error",
                  data: error.message,
                },
              });

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—à–∏–±–∫–µ
              sendSSEEvent("tool_error", {
                tool: toolName,
                error: error.message,
              });
            }
          } else if (toolNames.includes(request.method)) {
            // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –º–µ—Ç–æ–¥–∞
            const toolName = request.method;
            const params = request.params || {};

            log(
              `üîß –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: ${toolName} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: ${JSON.stringify(
                params
              )}`
            );

            try {
              // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ search_users (Cursor –æ–∂–∏–¥–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä 'q')
              if (toolName === "search_users" && params.q && !params.query) {
                log(
                  `‚ÑπÔ∏è –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ q -> query –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ search_users. q=${params.q}`
                );
                params.query = params.q;
                delete params.q;
                log(
                  `‚ÑπÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: ${JSON.stringify(params)}`
                );
              }

              // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
              if (toolName === "list_users" || toolName === "list_groups") {
                log(
                  `‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ${toolName} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é`
                );

                // –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é
                const implementation = toolsMap[toolName];
                if (!implementation) {
                  throw new Error(
                    `–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${toolName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`
                  );
                }

                const result = await implementation({});

                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è MCP
                const formattedResult = formatMCPResult(toolName, result);

                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                sendJSONResponse(res, {
                  jsonrpc: "2.0",
                  id: request.id,
                  result: formattedResult,
                });

                log(`‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ${toolName} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω`);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                sendSSEEvent("tool_executed", {
                  tool: toolName,
                  status: "success",
                });

                return;
              }

              // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
              const validationResult = safeValidateToolParams(toolName, params);
              if (!validationResult.success) {
                log(
                  `‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è ${toolName}: ${JSON.stringify(
                    validationResult.error.format()
                  )}`
                );

                sendJSONResponse(res, {
                  jsonrpc: "2.0",
                  id: request.id,
                  error: {
                    code: -32602,
                    message: "Invalid params",
                    data: validationResult.error.format(),
                  },
                });
                return;
              }

              // –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
              const implementation = toolsMap[toolName];
              if (!implementation) {
                throw new Error(
                  `–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${toolName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`
                );
              }

              const result = await implementation(validationResult.data);

              // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
              const resultValidation = safeValidateToolResult(toolName, result);
              if (!resultValidation.success) {
                log(
                  `‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${toolName} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ö–µ–º–µ: ${JSON.stringify(
                    resultValidation.error
                  )}`
                );
              }

              // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è MCP –¥–ª—è –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤
              const formattedResult = formatMCPResult(toolName, result);

              // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ JSON-RPC
              sendJSONResponse(res, {
                jsonrpc: "2.0",
                id: request.id,
                result: formattedResult,
              });

              log(`‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ${toolName} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω`);

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
              sendSSEEvent("tool_executed", {
                tool: toolName,
                status: "success",
              });
            } catch (error) {
              log(
                `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${toolName}: ${error.message}`
              );

              sendJSONResponse(res, {
                jsonrpc: "2.0",
                id: request.id,
                error: {
                  code: -32603,
                  message: "Internal error",
                  data: error.message,
                },
              });

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—à–∏–±–∫–µ
              sendSSEEvent("tool_error", {
                tool: toolName,
                error: error.message,
              });
            }
          } else {
            // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥
            sendJSONResponse(res, {
              jsonrpc: "2.0",
              id: request.id,
              error: {
                code: -32601,
                message: "Method not found",
              },
            });
          }
        } else {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
          sendJSONResponse(res, {
            error: {
              code: -32600,
              message: "Invalid Request",
            },
          });
        }
      } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON-RPC –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
        sendJSONResponse(res, {
          jsonrpc: "2.0",
          id: null,
          error: {
            code: -32700,
            message: "Parse error",
            data: error.message,
          },
        });
      }
    });
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ SSE-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ–±—ã—Ç–∏–π MCP
  if (pathname === "/mcp/events") {
    res.writeHead(200, {
      "Content-Type": "text/event-stream",
      "Cache-Control": "no-cache",
      Connection: "keep-alive",
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    res.write("event: connected\ndata: {}\n\n");

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
    sseClients.add(res);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    req.on("close", () => {
      sseClients.delete(res);
      log(`üì§ SSE –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${sseClients.size}`);
    });

    log(`üì• –ù–æ–≤–æ–µ SSE-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${sseClients.size}`);
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
  if (pathname === "/health") {
    const isApiAccessible = await checkApiAccess();
    sendJSONResponse(res, {
      status: isApiAccessible ? "ok" : "error",
      message: isApiAccessible
        ? "MCP Server is running and connected to Wiki.js"
        : "MCP Server is running but Wiki.js API is not accessible",
    });
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∫–æ—Ä–Ω—é
  if (pathname === "/") {
    sendJSONResponse(res, {
      status: "ok",
      message: "Wiki.js MCP Server is running",
      version: "1.0.0",
      endpoints: {
        "/health": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞",
        "/tools": "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤",
        "/mcp": "MCP JSON-RPC endpoint –¥–ª—è Cursor",
        "/mcp/events": "SSE endpoint –¥–ª—è —Å–æ–±—ã—Ç–∏–π MCP",
        "/{tool_name}": "–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏",
      },
    });
    return;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  if (pathname === "/tools") {
    res.writeHead(200, { "Content-Type": "application/json" });
    res.end(JSON.stringify(tools));
    return;
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–∑ URL
  const toolName = pathname.substring(1); // –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π "/"

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
  if (!toolNames.includes(toolName)) {
    res.writeHead(404, { "Content-Type": "application/json" });
    res.end(
      JSON.stringify({
        error: `–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç "${toolName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`,
        available_tools: toolNames,
      })
    );
    return;
  }

  try {
    // –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    let params = {};

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
    if (req.method === "GET") {
      // –î–ª—è GET –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ URL
      for (const [key, value] of url.searchParams.entries()) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—ã
        if (value === "true") {
          params[key] = true;
        } else if (value === "false") {
          params[key] = false;
        } else if (!isNaN(Number(value)) && value.trim() !== "") {
          params[key] = Number(value);
        } else {
          params[key] = value;
        }
      }
    } else if (req.method === "POST") {
      // –î–ª—è POST –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
      const bodyChunks = [];
      req.on("data", (chunk) => {
        bodyChunks.push(chunk);
      });

      await new Promise((resolve, reject) => {
        req.on("end", resolve);
        req.on("error", reject);
      });

      const bodyRaw = Buffer.concat(bodyChunks).toString();
      if (bodyRaw) {
        try {
          params = JSON.parse(bodyRaw);
        } catch (e) {
          res.writeHead(400, { "Content-Type": "application/json" });
          res.end(
            JSON.stringify({
              error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞",
            })
          );
          return;
        }
      }
    } else {
      // –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
      res.writeHead(405, { "Content-Type": "application/json" });
      res.end(
        JSON.stringify({
          error: `–ú–µ—Ç–æ–¥ ${req.method} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`,
        })
      );
      return;
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –ø–æ–º–æ—â—å—é Zod
    const validationResult = safeValidateToolParams(toolName, params);

    if (!validationResult.success) {
      log(
        `‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è ${toolName}: ${JSON.stringify(
          validationResult.error.format()
        )}`
      );

      res.writeHead(400, { "Content-Type": "application/json" });
      res.end(
        JSON.stringify({
          error: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
          details: validationResult.error.format(),
        })
      );
      return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = validationResult.data;

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    log(
      `üîß –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${toolName} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: ${JSON.stringify(
        params
      )}`
    );

    // –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    const implementation = toolsMap[toolName];
    if (!implementation) {
      throw new Error(`–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${toolName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }

    const result = await implementation(params);

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–º–æ—â—å—é Zod
    const resultValidation = safeValidateToolResult(toolName, result);

    if (!resultValidation.success) {
      log(
        `‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${toolName} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ö–µ–º–µ: ${JSON.stringify(
          resultValidation.error
        )}`
      );
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    res.writeHead(200, { "Content-Type": "application/json" });
    res.end(JSON.stringify(result));

    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    log(`‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ${toolName} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    sendSSEEvent("tool_executed", {
      tool: toolName,
      status: "success",
    });
  } catch (error) {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ Zod –æ—Ç–¥–µ–ª—å–Ω–æ
    if (error instanceof ZodError) {
      log(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.message}`);
      res.writeHead(400, { "Content-Type": "application/json" });
      res.end(
        JSON.stringify({
          error: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          details: error.format(),
        })
      );
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${toolName}: ${error.message}`);
    res.writeHead(500, { "Content-Type": "application/json" });
    res.end(
      JSON.stringify({
        error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: ${error.message}`,
      })
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—à–∏–±–∫–µ
    sendSSEEvent("tool_error", {
      tool: toolName,
      error: error.message,
    });
  }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
server.listen(PORT, async () => {
  log(`üöÄ MCP HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  log(`üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wiki.js API: ${API_URL}`);
  log(`üîå MCP JSON-RPC endpoint: http://localhost:${PORT}/mcp`);
  log(`üì° MCP SSE events endpoint: http://localhost:${PORT}/mcp/events`);

  const isApiAccessible = await checkApiAccess();
  if (isApiAccessible) {
    log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wiki.js API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
    log(`üìã –î–æ—Å—Ç—É–ø–Ω–æ ${tools.length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${toolNames.join(", ")}`);
  } else {
    log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Wiki.js API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.`);
  }
});
