#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Wiki.js —á–µ—Ä–µ–∑ stdio
 */

import { spawn } from "child_process";
import path from "path";
import { fileURLToPath } from "url";
import { config as dotenvConfig } from "dotenv";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenvConfig();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞ (–∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
const serverPath = path.join(path.dirname(__dirname), "mcp_wikijs_stdin.js");
const serverProcess = spawn("node", [serverPath], {
  stdio: ["pipe", "pipe", "inherit"],
  env: {
    ...process.env,
    WIKIJS_BASE_URL: process.env.WIKIJS_BASE_URL || "http://localhost:3000",
    WIKIJS_TOKEN: process.env.WIKIJS_TOKEN || "your_wikijs_api_token_here",
  },
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
serverProcess.stdout.setEncoding("utf8");
let responseBuffer = "";

serverProcess.stdout.on("data", (chunk) => {
  responseBuffer += chunk;
  if (responseBuffer.includes("\n")) {
    const lines = responseBuffer.split("\n");
    responseBuffer = lines.pop(); // –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –±—É—Ñ–µ—Ä–µ

    for (const line of lines) {
      if (line.trim()) {
        try {
          const response = JSON.parse(line);
          console.log("\n–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:", JSON.stringify(response, null, 2));
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞:", error.message);
          console.error("–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:", line);
        }
      }
    }
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–µ—Ä—É
function sendRequest(request) {
  console.log(`\n–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${JSON.stringify(request, null, 2)}`);
  serverProcess.stdin.write(JSON.stringify(request) + "\n");
}

// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
setTimeout(() => {
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  console.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ tools...");
  sendRequest({
    id: "1",
    type: "query",
    query: "tools",
  });

  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
  setTimeout(() => {
    console.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ list_pages...");
    sendRequest({
      id: "2",
      type: "function_call",
      name: "list_pages",
      parameters: {
        limit: 5,
      },
    });
  }, 2000);

  // –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
  setTimeout(() => {
    console.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ search_pages...");
    sendRequest({
      id: "3",
      type: "function_call",
      name: "search_pages",
      parameters: {
        query: "test",
        limit: 3,
      },
    });
  }, 4000);
}, 2000);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
serverProcess.on("close", (code) => {
  console.log(`MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –∫–æ–¥–æ–º ${code}`);
  process.exit(0);
});

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏
process.on("SIGINT", () => {
  console.log("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...");
  serverProcess.kill();
  process.exit(0);
});
